# 1. Convert all the column names to lower cases and rename the columns that have empty space.
df <- raw.df %>% rename_all(tolower)
colnames(df) <- new_columnName
df <- df %>% mutate(., inspection.date=as.Date(inspection.date,format = "%mm/%dd/%yyyy"))
df <- df %>% mutate(., month=as.integer(substr(as.character(inspection.date),6,7)))
df
# 1. Convert all the column names to lower cases and rename the columns that have empty space.
df <- raw.df %>% rename_all(tolower)
new_columnName<-str_replace_all(colnames(df), c(" " = "."))
colnames(df) <- new_columnName
df <- df %>% mutate(., inspection.date=as.Date(inspection.date,format = "%m/%d/%Y"))
df <- df %>% mutate(., month=as.integer(substr(as.character(inspection.date),6,7)))
df
# 1. Convert all the column names to lower cases and rename the columns that have empty space.
df <- raw.df %>% rename_all(tolower)
colnames(df) <- new_columnName
df <- df %>% mutate(., inspection.date=as.Date(inspection.date,format = "%m/%d/%Y"))
df <- df %>% mutate(., month=as.integer(substr(as.character(inspection.date),6,7)))
df <- df %>%
filter(., is.na(grade)) %>%
mutate(.,grade = ifelse(is.na(grade),case_when(
score>=0 | score < 14 ~ 'A',
score>=14 | score <28 ~ 'B',
score>=28 ~ 'C'), grade))
df <- df %>%
filter(., is.na(grade)) %>%
mutate(.,grade = ifelse(is.na(grade),case_when(
score>=0 | score < 14 ~ 'A',
score>=14 | score <28 ~ 'B',
score>=28 ~ 'C'), grade))
df[grep("Violations were cited in the following", df$action ),"violation.description"] <- "violations"
df[grep("Establishment Closed by DOHMH", df$action ),"violation.description"] <- "closed"
df[grep("Establishment re-closed by DOHMH", df$action ),"violation.description"] <- "reclosed"
df[grep("No violations were recorded at the time of this", df$action ),"violation.description"] <- "no violations"
df[grep("Establishment re-opened by DOHMH", df$action ),"violation.description"] <- "reopened"
# 6. We want to filter out missing values to make our lives easier for further analysis.
#     + Filter out missing values from the `boro` column.
#     + Filter out missing values and negative values from the `score` column.
#     + Filter out any `inspection date` that doesn't make any sense.
df %>% filter(., !is.na(boro)) %>%
filter(., !is.na(score)) %>%
filter(., score > 0) %>%
filter(.,!is.na(inspection.date)) %>%
filter(., inspection.date<Sys.Date())
df %>% filter(., !is.na(boro)) %>%
filter(., !is.na(score)) %>%
filter(., score > 0)
df
df %>% filter(., !is.na(boro)) %>%
filter(., !is.na(score)) %>%
filter(., score > 0) %>%
filter(., as.character(inspection.date) != "1900-01-01")
as.character(df$inspection.date)
# 6. We want to filter out missing values to make our lives easier for further analysis.
#     + Filter out missing values from the `boro` column.
#     + Filter out missing values and negative values from the `score` column.
#     + Filter out any `inspection date` that doesn't make any sense.
df %>% filter(., !is.na(boro)) %>%
filter(., !is.na(score)) %>%
filter(., score > 0) %>%
filter(., as.character(inspection.date) != "1900-01-01")
# 6. We want to filter out missing values to make our lives easier for further analysis.
#     + Filter out missing values from the `boro` column.
#     + Filter out missing values and negative values from the `score` column.
#     + Filter out any `inspection date` that doesn't make any sense.
df %>% filter(., !is.na(boro)) %>%
filter(., !is.na(score)) %>%
filter(., score > 0)
# 6. We want to filter out missing values to make our lives easier for further analysis.
#     + Filter out missing values from the `boro` column.
#     + Filter out missing values and negative values from the `score` column.
#     + Filter out any `inspection date` that doesn't make any sense.
df %>% filter(., !is.na(boro)) %>%
filter(., !is.na(score))
# 6. We want to filter out missing values to make our lives easier for further analysis.
#     + Filter out missing values from the `boro` column.
#     + Filter out missing values and negative values from the `score` column.
#     + Filter out any `inspection date` that doesn't make any sense.
df
# 6. We want to filter out missing values to make our lives easier for further analysis.
#     + Filter out missing values from the `boro` column.
#     + Filter out missing values and negative values from the `score` column.
#     + Filter out any `inspection date` that doesn't make any sense.
df %>% filter(., !is.na(boro))
# 6. We want to filter out missing values to make our lives easier for further analysis.
#     + Filter out missing values from the `boro` column.
#     + Filter out missing values and negative values from the `score` column.
#     + Filter out any `inspection date` that doesn't make any sense.
df %>% filter(., !is.na(boro)) %>%
filter(., !is.na(score))
df %>% filter(., !is.na(boro))
df$grade = ifelse(is.na(df$grade),case_when(
df$score>=0 | df$score < 14 ~ 'A',
df$score>=14 | df$score <28 ~ 'B',
df$score>=28 ~ 'C'), df$grade))
df$grade = ifelse(!is.na(df$grade),df$grade,
case_when(df$score>=0 | df$score < 14 ~ 'A',
df$score>=14 | df$score <28 ~ 'B',
df$score>=28 ~ 'C'))
df[grep("Violations were cited in the following", df$action ),"violation.description"] <- "violations"
df[grep("Establishment Closed by DOHMH", df$action ),"violation.description"] <- "closed"
df[grep("Establishment re-closed by DOHMH", df$action ),"violation.description"] <- "reclosed"
df[grep("No violations were recorded at the time of this", df$action ),"violation.description"] <- "no violations"
df[grep("Establishment re-opened by DOHMH", df$action ),"violation.description"] <- "reopened"
# 6. We want to filter out missing values to make our lives easier for further analysis.
#     + Filter out missing values from the `boro` column.
#     + Filter out missing values and negative values from the `score` column.
#     + Filter out any `inspection date` that doesn't make any sense.
df %>% filter(., !is.na(boro)) %>%
filter(., !is.na(score))
# 1. Convert all the column names to lower cases and rename the columns that have empty space.
df <- raw.df %>% rename_all(tolower)
colnames(df) <- new_columnName
df <- df %>% mutate(., month=as.integer(substr(as.character(inspection.date),6,7)))
df <- df %>% mutate(., month=as.integer(substr(as.character(inspection.date),6,7)))
df$grade = ifelse(!is.na(df$grade),df$grade,
case_when(df$score>=0 | df$score < 14 ~ 'A',
df$score>=14 | df$score <28 ~ 'B',
df$score>=28 ~ 'C'))
df$grade = ifelse(!is.na(df$grade),df$grade,
case_when(df$score>=0 | df$score < 14 ~ 'A',
df$score>=14 | df$score <28 ~ 'B',
df$score>=28 ~ 'C'))
df[grep("Violations were cited in the following", df$action ),"violation.description"] <- "violations"
df$grade = ifelse(!is.na(df$grade),df$grade,
case_when(df$score>=0 | df$score < 14 ~ 'A',
df$score>=14 | df$score <28 ~ 'B',
df$score>=28 ~ 'C'))
df[grep("Violations were cited in the following", df$action ),"violation.description"] <- "violations"
df[grep("Establishment Closed by DOHMH", df$action ),"violation.description"] <- "closed"
df[grep("Establishment Closed by DOHMH", df$action ),"violation.description"] <- "closed"
df[grep("Establishment re-closed by DOHMH", df$action ),"violation.description"] <- "reclosed"
df[grep("No violations were recorded at the time of this", df$action ),"violation.description"] <- "no violations"
df[grep("No violations were recorded at the time of this", df$action ),"violation.description"] <- "no violations"
df[grep("Establishment re-opened by DOHMH", df$action ),"violation.description"] <- "reopened"
df[grep("Establishment re-opened by DOHMH", df$action ),"violation.description"] <- "reopened"
# 6. We want to filter out missing values to make our lives easier for further analysis.
#     + Filter out missing values from the `boro` column.
#     + Filter out missing values and negative values from the `score` column.
#     + Filter out any `inspection date` that doesn't make any sense.
df %>% filter(., !is.na(boro)) %>%
filter(., !is.na(score))
# 6. We want to filter out missing values to make our lives easier for further analysis.
#     + Filter out missing values from the `boro` column.
#     + Filter out missing values and negative values from the `score` column.
#     + Filter out any `inspection date` that doesn't make any sense.
df %>% filter(., !is.na(boro)) %>%
filter(., !is.na(score)) %>%
filter(., score>0) %>%
filter(., as.character(inspection.date) != "1900-01-01")
# 6. We want to filter out missing values to make our lives easier for further analysis.
#     + Filter out missing values from the `boro` column.
#     + Filter out missing values and negative values from the `score` column.
#     + Filter out any `inspection date` that doesn't make any sense.
df <- df %>% filter(., !is.na(boro)) %>%
filter(., !is.na(score)) %>%
filter(., score>0) %>%
filter(., as.character(inspection.date) != "1900-01-01")
# 7. Select the following columns from raw.df: camis, boro, cuisine, inspection.date, action, score, grade, month
data1 <- df %>% select(., camis,boro,cuisine, inspection.date,action,score, grade, month)
df
# 7. Select the following columns from raw.df: camis, boro, cuisine, inspection.date, action, score, grade, month
data1 <- df %>% select(., camis,boro,cuisine.description, inspection.date,action,score, grade, month) %>%
rename(., cuisine = cuisine.description)
df
# 8. Unique inspections
inspections <- unique(df$inspection.type)
df
plot <- df %>% group_by(., boro) %>% summarise(.,mean(grade))
plot <- df %>% group_by(.,boro,grade) %>% summarise(., Count=n())
plot <- df %>% group_by(.,boro,grade) %>% summarise(., Count=n())
ggplot(plot,aes(boro,count, group=grade))+geom_bar(stat="identity")
ggplot(plot,aes(boro,Count, group=grade))+geom_bar(stat="identity")
ggplot(plot,aes(boro,Count, group=grade, color=grades))+geom_bar(stat="identity")
ggplot(plot,aes(boro,Count, group=grade, color=grade))+geom_bar(stat="identity")
ggplot(plot,aes(boro,Count, group=grade, color=grade))+geom_bar(stat="identity", fill=grade)
ggplot(plot,aes(boro,Count, group=grade, color=grade))+geom_bar(stat="identity", fill="grade")
ggplot(plot,aes(boro,Count, group=grade, fill=grade))+geom_bar(stat="identity", position="dodge")
plot <- df %>% group_by(.,cuisine.description,grade) %>% summarise(., Count=n())
ggplot(plot,aes(cuisine.description,Count, group=grade, fill=grade))+geom_bar(stat="identity", position="dodge")
ggplot(plot,aes(cuisine.description,Count, group=grade, fill=grade))+geom_bar(stat="identity")
plot <- df %>% group_by(.,cuisine.description,grade) %>% summarise(., Count=n()) %>% arrange(.,desc(Count)) %>% top_n(.,20)
plot <- df %>% group_by(.,cuisine.description,grade) %>% summarise(., Count=n()) %>% arrange(.,desc(Count)) %>% top_n(.,20)
plot <- df %>% group_by(.,cuisine.description,grade) %>% summarise(., Count=n()) %>% arrange(.,desc(Count)) %>% top_n(.,20)
ggplot(plot,aes(cuisine.description,Count, group=grade, fill=grade))+geom_bar(stat="identity")
ggplot(plot,aes(grade,Count, group=grade, fill=cuisine))+geom_bar(stat="identity")
ggplot(plot,aes(grade,Count, group=grade, fill=cuisine.description))+geom_bar(stat="identity")
plot
plot <- df %>% group_by(.,cuisine.description,grade) %>% summarise(., Count=n()) %>%  top_n(.,20, Count)
plot
plot <- df %>% group_by(.,cuisine.description,grade) %>% summarise(., Count=n()) %>%  arrange(., desc(Count)) %>% top_n(.,20, cuisine.description)
plot
ggplot(plot,aes(grade,Count, group=grade, fill=cuisine.description))+geom_bar(stat="identity")
ggplot(plot,aes(cuisine.description,Count, group=cuisine.description, fill=grade))+geom_bar(stat="identity")
ggplot(plot,aes(grade,Count, group=cuisine.description, fill=cuisine.description))+geom_bar(stat="identity")
plot
plot <- df %>% group_by(.,cuisine.description,grade) %>% summarise(., Count=n()) %>%  arrange(., desc(Count))
plot
ggplot(plot[1:20,],aes(grade,Count, group=cuisine.description, fill=cuisine.description))+geom_bar(stat="identity")
ggplot(plot[1:20,],aes(cuisine.description,Count, group=grade, fill=grade))+geom_bar(stat="identity")
plot <- df %>% group_by(.,cuisine.description,grade) %>% summarise(., Count=n()) %>%  arrange(., desc(Count))
plot
cuisines <- df %>% group_by(., cuisine.description) %>% summarise(., count=mean()) %>% arrange(.,desc(count))
cuisines <- df %>% group_by(., cuisine.description) %>% summarise(., count=n()) %>% arrange(.,desc(count))
cuisines <- df %>% group_by(., cuisine.description) %>% summarise(., count=n()) %>% arrange(.,desc(count)) %>% top_n(.,20) %>% select(., cuisine.description)
cuisines
plot <- df %>% filter(., cuisine.description %in% cuisines) %>%
group_by(.,cuisine.description,grade) %>% summarise(., Count=n())
plot
df %>% filter(., cuisine.description %in% cuisines)
df %>% filter(., cuisine.description %in% cuisines[,1])
cuisines
df %>% filter(., cuisine.description %in% cuisines)
df
df %>% filter(., cuisine.description %in% cuisines)
df
class(cuisine)
class(cuisines)
df %>% filter(., cuisine.description %in% as.vector(cuisines))
cuisines
df %>% filter(., cuisine.description %in% cuisines[,"cuisine.description"])
df %>% count(cuisine.description)
df %>% count(cuisine.description) %>% arrange(.,desc(n))
df %>% count(cuisine.description) %>% arrange(.,desc(n)) %>% top_n(n,20)
cuisine <- df %>% count(cuisine.description) %>% arrange(.,desc(n))
cuisine <- df %>% count(cuisine.description) %>% arrange(.,desc(n)) %>% select(.,cuisine.description)
cuisine[1:20,]
cuisine[1:20,"cuisine.description"]
cuisine <- df %>% count(cuisine.description) %>% arrange(.,desc(n))
cuisine[1:20,"cuisine.description"]
plot <- df %>% filter(., cuisine.description %in% top20_cuisines) %>%
group_by(.,cuisine.description, grade) %>% summarise(., Count=n())
cuisine <- df %>% count(cuisine.description) %>% arrange(.,desc(n))
top20_cuisines <- cuisine[1:20,"cuisine.description"]
plot <- df %>% filter(., cuisine.description %in% top20_cuisines) %>%
group_by(.,cuisine.description, grade) %>% summarise(., Count=n())
plot
df %>% filter(., cuisine.description %in% top20_cuisines)
class(top20_cuisines)
df %>% filter(., cuisine.description %in% as.character(top20_cuisines))
class(top20_cuisines)
class(as.character(top20_cuisines))
df %>% filter(., cuisine.description %in% as.character(top20_cuisines))
df
cuisine <- df %>% count(cuisine.description) %>% arrange(.,desc(n))
top20_cuisines <- cuisine[1:20,"cuisine.description"]
top20_cuisines
class(as.character(top20_cuisines))
df %>% filter(., cuisine.description %in% as.character(top20_cuisines))
as.character(top20_cuisines)
top20_cuisines
df %>% filter(., cuisine.description %in% top20_cuisines$cuisine.description)
cuisine <- df %>% count(cuisine.description) %>% arrange(.,desc(n)) %>% select(., cuisine.description)
df %>% filter(., cuisine.description %in% cuisine$cuisine.description)
df %>% filter(., cuisine.description %in% cuisine$cuisine.description)
plot <- df %>% filter(., cuisine.description %in% cuisine$cuisine.description)
group_by(.,cuisine.description, grade) %>% summarise(., Count=n())
plot <- df %>% filter(., cuisine.description %in% cuisine$cuisine.description)
plot <- df %>% filter(., cuisine.description %in% cuisine$cuisine.description) %>%
group_by(.,cuisine.description, grade) %>% summarise(., Count=n())
ggplot(plot,aes(cuisine.description,Count, group=grade, fill=grade))+geom_bar(stat="identity", position="dodge")
ggplot(plot,aes(grade,Count, group=cuisine.description, fill=cuisine.description))+geom_bar(stat="identity", position="dodge")
plot
ggplot(plot,aes(cuisine.description,Count, group=grade, fill=grade))+geom_bar(stat="identity")
df %>% count(boro)
boro <- df %>% count(boro)
ggplot(df,aes(boro))+geom_density(na.rm=T)
ggplot(df)+geom_density(aes(boro),na.rm=T)
ggplot(df)+geom_density(aes(boro),na.rm=T)+
geom_point(aes(boro,score),color=boro)
ggplot(df)+geom_density(aes(boro),na.rm=T)+
geom_point(aes(boro,score, group=boro),color=boro)
ggplot(df)+geom_density(aes(boro),na.rm=T)+
geom_point(aes(boro,score, color=boro))
ggplot(df)+geom_density(aes(boro),na.rm=T)+
geom_col(aes(boro,score, color=boro))
df %>% group_by(.,boro) %>% summarise(.,count=n(),score=mean(score))
ggplot(df)+geom_density(aes(boro,group=boro,color=boro))
shiny::runApp('NYCDSA/R_shiny_project')
runApp('NYCDSA/R_shiny_project')
runApp('NYCDSA/R_shiny_project')
runApp('NYCDSA/R_shiny_project')
runApp('NYCDSA/R_shiny_project')
runApp('NYCDSA/R_shiny_project')
runApp('NYCDSA/R_shiny_project')
runApp('NYCDSA/R_shiny_project')
daily <- as.data.frame(my_data %>% group_by(., Date, State) %>%
summarise(.,Count=n()) %>% mutate(., Count=as.numeric(Count),
Day=as.character(weekdays(as.Date(Date))),
Is.Weekday=ifelse(Day %in% c("Monday", "Tuesday", "Wednesday", "Thursday", "Friday"),
"Weekday", "Weekend")))
gvisAnnotationChart(daily %>% filter(., State==input$State),
datevar = "Date", numvar="Count",#idvar="Day",
options=list(displayAnnotations=TRUE,
legendPosition='newRow',
width=1150, height=400))
gvisAnnotationChart(daily %>% filter(., State=="CA"),
datevar = "Date", numvar="Count",#idvar="Day",
options=list(displayAnnotations=TRUE,
legendPosition='newRow',
width=1150, height=400))
timeseries <- gvisAnnotationChart(daily %>% filter(., State=="CA"),
datevar = "Date", numvar="Count",#idvar="Day",
options=list(displayAnnotations=TRUE,
legendPosition='newRow',
width=1150, height=400))
plot(timeseries)
timeseries <- gvisAnnotationChart(daily %>% filter(., State=="CA"),
datevar = "Date", numvar="Count",idvar="Is.Weekday",
options=list(displayAnnotations=TRUE,
legendPosition='newRow',
width=1150, height=400))
plot(timeseries)
timeseries <- gvisAnnotationChart(daily %>% filter(., State %in% c("CA","USA")),
datevar = "Date", numvar="Count",idvar="State",
options=list(displayAnnotations=TRUE,
legendPosition='newRow',
width=1150, height=400))
plot(timeseries)
daily
unique(daily)
unique(daily$State)
population_raw
daily %>% filter(., State %in% c("CA")) %>%
mutate(., Count.weekday=ifelse(Is.Weekday=="Weekday",Count,NA),
Count.weekend=ifelse(Is.Weekday=="Weekend",Count,NA)) %>%
select(., -starts_with("Coun"))
daily %>% filter(., State %in% c("CA")) %>%
mutate(., Weekday.Count=ifelse(Is.Weekday=="Weekday",Count,NA),
Weekend.Count=ifelse(Is.Weekday=="Weekend",Count,NA)) %>%
select(., -starts_with("Coun"))
timeseries <- gvisAnnotationChart(daily %>% filter(., State %in% c("CA")) %>%
mutate(., Weekday.Count=ifelse(Is.Weekday=="Weekday",Count,NA),
Weekend.Count=ifelse(Is.Weekday=="Weekend",Count,NA)) %>%
select(., -starts_with("Coun")),
datevar = "Date", numvar=c("Weekday.Count","Weekend.Count"),idvar="Is.Weekday",
options=list(displayAnnotations=TRUE,
legendPosition='newRow',
width=1150, height=400))
timeseries <- gvisAnnotationChart(daily %>% filter(., State %in% c("CA")),
datevar = "Date", numvar=c("Weekday.Count","Weekend.Count"),idvar="Day",
options=list(displayAnnotations=TRUE,
legendPosition='newRow',
width=1150, height=400))
timeseries <- gvisAnnotationChart(daily %>% filter(., State %in% c("CA")),
datevar = "Date", numvar="Count",idvar="Day",
options=list(displayAnnotations=TRUE,
legendPosition='newRow',
width=1150, height=400))
plot(timeseries)
timeseries <- gvisAnnotationChart(daily %>% filter(., State %in% c("CA")),
datevar = "Date", numvar="Count",idvar="Day",
options=list(displayAnnotations=TRUE,
legendPosition='newRow',
width=1150, height=400))
plot(timeseries)
timeseries <- gvisAnnotationChart(daily %>% filter(., State %in% c("CA")),
datevar = "Date", numvar="Count",#idvar="Day",
options=list(displayAnnotations=TRUE,
legendPosition='newRow',
width=1150, height=400))
plot(timeseries)
daily <- as.data.frame(my_data %>% group_by(., Date, State) %>%
summarise(.,Count=n()) %>% mutate(., Count=as.numeric(Count),
Day=as.character(weekdays(as.Date(Date))),
Is.Weekend=ifelse(Day %in% c("Monday", "Tuesday", "Wednesday", "Thursday", "Friday"),
"", "Weekend")))
timeseries <- gvisAnnotationChart(daily %>% filter(., State %in% c("CA")),
datevar = "Date", numvar="Count",annotationvar = "Is.Weekend",#idvar="Day",
options=list(displayAnnotations=TRUE,
legendPosition='newRow',
width=1150, height=400))
plot(timeseries)
runApp('NYCDSA/R_shiny_project')
runApp('NYCDSA/R_shiny_project')
runApp()
runApp()
runApp('NYCDSA/R_shiny_project')
runApp('NYCDSA/R_shiny_project')
data_USA
insurance_USA
data_USA
insurance_USA
#
# df <- as.data.frame(rbind(as.data.frame(data_state_insurance2),insurance_USA)) %>%
#                       mutate(.,n=1:50) %>% rename(., Accidents=proportion)
df <- as.data.frame(data_state_insurance2) %>%
mutate(.,n=1:50) %>% rename(., Accidents=proportion)
#
# df <- as.data.frame(rbind(as.data.frame(data_state_insurance2),insurance_USA)) %>%
#                       mutate(.,n=1:50) %>% rename(., Accidents=proportion)
df <- as.data.frame(data_state_insurance2) %>%
mutate(.,n=1:49) %>% rename(., Accidents=proportion)
runApp('NYCDSA/R_shiny_project')
runApp('NYCDSA/R_shiny_project')
runApp('NYCDSA/R_shiny_project')
runApp('NYCDSA/R_shiny_project')
runApp('NYCDSA/R_shiny_project')
runApp('NYCDSA/R_shiny_project')
runApp('NYCDSA/R_shiny_project')
runApp('NYCDSA/R_shiny_project')
runApp('NYCDSA/R_shiny_project')
runApp('NYCDSA/R_shiny_project')
runApp('NYCDSA/R_shiny_project')
runApp('NYCDSA/R_shiny_project')
runApp('NYCDSA/R_shiny_project')
runApp('NYCDSA/R_shiny_project')
my_data %>% filter(.,Severity %in% c("3","4")) %>%
filter(between(year, "2018", "2019")) %>%
group_by(.,year,month,State) %>% summarise(.,count=n()) %>%
inner_join(.,population_raw, by=c("year","State")) %>%
mutate(., proportion=count/Population*100) %>%
group_by(.,year,month) %>% summarise(avg=mean(count),avg_prop=mean(proportion)) %>%
group_by(.,month) %>% summarise(.,Count=round(mean(avg)), Proportion=round(mean(avg_prop),3)) %>%
mutate(., type="USA")
my_data %>% filter(.,Severity %in% c("3","4")) %>%
filter(between(year, "2018", "2019"))
my_data %>% filter(.,Severity %in% c("3","4")) %>%
filter(between(year, 2018, 2019)) %>%
group_by(.,year,month,State) %>% summarise(.,count=n()) %>%
inner_join(.,population_raw, by=c("year","State")) %>%
mutate(., proportion=count/Population*100) %>%
group_by(.,year,month) %>% summarise(avg=mean(count),avg_prop=mean(proportion)) %>%
group_by(.,month) %>% summarise(.,Count=round(mean(avg)), Proportion=round(mean(avg_prop),3)) %>%
mutate(., type="USA")
my_data %>% filter(.,Severity %in% c("3","4")) %>%
filter(between(year, 2018, 2019)) %>%
group_by(.,year,month,State) %>% summarise(.,count=n())
my_data %>% filter(.,Severity %in% c("3","4")) %>%
filter(between(year, 2018, 2019)) %>%
group_by
my_data %>% filter(.,Severity %in% c("3","4")) %>%
filter(between(year, 2018, 2019)) %>%
group_by(.,year) %>% summarise(.,count=n())
my_data %>% filter(.,Severity %in% c("3","4")) %>%
filter(between(year, 2018, 2019)) %>%
group_by(.,year,month,State) %>% summarise(.,count=n()) %>%
inner_join(.,population_raw, by=c("year","State")) %>%
mutate(., proportion=count/Population*100)
my_data %>% filter(.,Severity %in% c("3","4")) %>%
filter(between(year, 2018, 2019)) %>%
group_by(.,year,month,State) %>% summarise(.,count=n()) %>%
inner_join(.,population_raw, by=c("year","State")) %>%
mutate(., proportion=count/Population*100) %>%
group_by(.,year,month) %>% summarise(avg=mean(count),avg_prop=mean(proportion)) %>%
group_by(.,month) %>% summarise(.,Count=round(mean(avg)), Proportion=round(mean(avg_prop),3)) %>%
mutate(., type="USA")
react_bar_usa
runApp('NYCDSA/R_shiny_project')
runApp('NYCDSA/R_shiny_project')
runApp('NYCDSA/R_shiny_project')
runApp('NYCDSA/R_shiny_project')
runApp('NYCDSA/R_shiny_project')
library(rsconnect)
rsconnect::setAccountInfo(name='melanie-m-zheng', token='8C1D579BD9144825257A63DA9535D2D9', secret='TMXTxwj7oTAVPha2sqLF8ZFveMM3kYnNLpvXJO7K')
runApp('NYCDSA/R_shiny_project')
runApp('NYCDSA/R_shiny_project')
runApp('NYCDSA/R_shiny_project')
library(rsconnect)
rsconnect::setAccountInfo(name='melanie-m-zheng',
token='8C1D579BD9144825257A63DA9535D2D9',
secret='<SECRET>')
rsconnect::setAccountInfo(name='melanie-m-zheng', token='8C1D579BD9144825257A63DA9535D2D9', secret='TMXTxwj7oTAVPha2sqLF8ZFveMM3kYnNLpvXJO7K')
set.seed(1234)
wordcloud(words = d$word, freq = d$freq, min.freq = 100,
max.words=200, random.order=FALSE, rot.per=0.35,
colors=brewer.pal(10, "Spectral"))
setwd("~/NYCDSA/craigslist_scraping_proj")
data <- read.csv(file = "data.tsv", sep = "\t",stringsAsFactors = FALSE)
data <- data %>% mutate(., title_len = nchar(title))
data$bedrooms <- sub("\n|\"\"|\\s|", "", data$bedrooms)
# class(data$price) <- "dollar"
# format.dollar <- function(x, ...) paste0("$", unclass(x))
# as.data.frame.dollar <- base:::as.data.frame.factor
substr(data$time[1], 1,2)
data$time_range = ifelse(as.integer(substr(data$time,1,2))>=8 & as.integer(substr(data$time,1,2))<=15, "8AM~4PM",
ifelse(as.integer(substr(data$time,1,2))>=16 & as.integer(substr(data$time,1,2))<=23, "4PM~12AM","12AM~8AM"))
#**************************** WORD CLOUD ********************
library(tm)
library(SnowballC)
library(wordcloud)
library(RColorBrewer)
titles <- Corpus(VectorSource(data$title))
inspect(titles)
toSpace <- content_transformer(function (x , pattern ) gsub(pattern, " ", x))
titles <- tm_map(titles, toSpace, "/")
titles <- tm_map(titles, toSpace, "@")
titles <- tm_map(titles, toSpace, "\\|")
# Convert the text to lower case
titles <- tm_map(titles, content_transformer(tolower))
# Remove numbers
titles <- tm_map(titles, removeNumbers)
# Remove english common stopwords
titles <- tm_map(titles, removeWords, stopwords("english"))
# Remove your own stop word
# specify your stopwords as a character vector
titles <- tm_map(titles, removeWords, c("blabla1", "blabla2"))
# Remove punctuations
titles <- tm_map(titles, removePunctuation)
# Eliminate extra white spaces
titles <- tm_map(titles, stripWhitespace)
# Text stemming
titles <- tm_map(titles, stemDocument)
dtm <- TermDocumentMatrix(titles)
m <- as.matrix(dtm)
v <- sort(rowSums(m),decreasing=TRUE)
d <- data.frame(word = names(v),freq=v)
head(d, 10)
set.seed(1234)
wordcloud(words = d$word, freq = d$freq, min.freq = 100,
max.words=200, random.order=FALSE, rot.per=0.35,
colors=brewer.pal(10, "Spectral"))
